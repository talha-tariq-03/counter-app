{"version":3,"sources":["Components/Navbar.jsx","Components/Counter.jsx","Components/Counters.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","totalCounters","className","Counter","this","getBadgeClasses","formatCounter","onClick","props","onIncrement","counter","onDelete","id","classes","value","Component","Counters","onReset","counters","map","key","App","state","handleIncrement","console","log","index","indexOf","setState","handleDelete","CounterId","update","filter","c_ID","handleReset","reset","resetV","Fragment","count","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wPAoBeA,EAhBA,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAGhB,OACE,yBAAKC,UAAU,gCACb,0BAAMA,UAAU,wBAAhB,6BAEE,0BAAMA,UAAU,4CACbD,MC0BIE,E,uKApCH,IAAD,OACP,OACE,yBAAKD,UAAU,gBACb,0BAAMA,UAAWE,KAAKC,mBAAoBD,KAAKE,iBAC/C,4BACEC,QAAS,kBAAM,EAAKC,MAAMC,YAAY,EAAKD,MAAME,UACjDR,UAAU,2BAFZ,aAMA,4BACEK,QAAS,kBAAM,EAAKC,MAAMG,SAAS,EAAKH,MAAME,QAAQE,KACtDV,UAAU,6BAFZ,a,wCAWJ,IAAIW,EAAU,mBAEd,OADAA,GAAwC,IAA7BT,KAAKI,MAAME,QAAQI,MAAc,UAAY,Y,sCAQzC,IACPA,EAAUV,KAAKI,MAAME,QAArBI,MACR,OAAiB,IAAVA,EAAc,OAASA,M,GAjCZC,aCwBPC,E,uKArBH,IAAD,EAC8CZ,KAAKI,MAAlDG,EADD,EACCA,SAAUM,EADX,EACWA,QAASR,EADpB,EACoBA,YAAaS,EADjC,EACiCA,SACxC,OACE,6BACGA,EAASC,KAAI,SAACT,GAAD,OACZ,kBAAC,EAAD,CACEU,IAAKV,EAAQE,GACbF,QAASA,EACTC,SAAUA,EACVF,YAAaA,OAIjB,4BAAQF,QAASU,EAASf,UAAU,8BAApC,c,GAdea,aC0ERM,G,wDAtEb,aAAe,IAAD,8BAEZ,gBAWFC,MAAQ,CACNJ,SAAU,CACR,CAAEN,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,KAlBN,EAsBdS,gBAAkB,SAACb,GACjBc,QAAQC,IAAIf,GACZ,IAAMQ,EAAQ,YAAO,EAAKI,MAAMJ,UAC1BQ,EAAQR,EAASS,QAAQjB,GAC/BQ,EAASQ,GAAT,eAAuBhB,GACvBQ,EAASQ,GAAOZ,QAChB,EAAKc,SAAS,CAAEV,cA5BJ,EA+BdW,aAAe,SAACC,GACd,IAAMC,EAAS,EAAKT,MAAMJ,SAASc,QAAO,SAACC,GAAD,OAAUA,EAAKrB,KAAOkB,KAEhE,EAAKF,SAAS,CAAEV,SAAUa,KAlCd,EAsCdG,YAAc,WACZ,IAAMC,EAAQ,EAAKb,MAAMJ,SAASC,KAAI,SAACiB,GAErC,OADAA,EAAOtB,MAAQ,EACRsB,KAET,EAAKR,SAAS,CAAEV,SAAUiB,KAxC1BX,QAAQC,IAAI,4BAA6B,EAAKjB,OAHlC,E,gEAUZgB,QAAQC,IAAI,mB,+BAuCZ,OADAD,QAAQC,IAAI,gBAEV,kBAAC,IAAMY,SAAP,KACE,kBAAC,EAAD,CACEnC,UAAU,eACVD,cACEG,KAAKkB,MAAMJ,SAASc,QAAO,SAACM,GAAD,OAAWA,EAAMxB,MAAQ,KAAGyB,SAG3D,0BAAMrC,UAAU,yBACd,kBAAC,EAAD,CACEgB,SAAUd,KAAKkB,MAAMJ,SACrBD,QAASb,KAAK8B,YACdvB,SAAUP,KAAKyB,aACfpB,YAAaL,KAAKmB,wB,GAhEZR,cCOEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,a","file":"static/js/main.d77158e4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n//creating the stateless fucntional components\r\n// In stateless functional components, we need to pass the props as a parametr i.e. No need to use the \"this\" Operator\r\nconst Navbar = ({ totalCounters }) => {\r\n  //To make the code more cleaner, we can use destructing arguments\r\n  // we need to change the props as an argument into\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <span className=\"navbar-brand mb-0 h1\">\r\n        Total Number of Counters :\r\n        <span className=\"badge badge-info badge-sm m-2 badge-pill\">\r\n          {totalCounters}\r\n        </span>\r\n      </span>\r\n    </nav>\r\n  );\r\n};\r\n\r\n//creating the stateless fucntional components\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\nclass Counter extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"resetOutline\">\r\n        <span className={this.getBadgeClasses()}>{this.formatCounter()}</span>\r\n        <button\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-secondry btn-sm\"\r\n        >\r\n          Increment\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n          className=\"btn btn-danger btn-sm m-3\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  //Dynamic / renderring class dynamically styling based on the decision\r\n\r\n  //decision of the badge\r\n\r\n  formatCounter() {\r\n    const { value } = this.props.counter;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./Counter\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    const { onDelete, onReset, onIncrement, counters } = this.props; // object destructing to make the code more cleaner\r\n    return (\r\n      <div>\r\n        {counters.map((counter) => (\r\n          <Counter\r\n            key={counter.id}\r\n            counter={counter}\r\n            onDelete={onDelete}\r\n            onIncrement={onIncrement}\r\n          />\r\n        ))}\r\n\r\n        <button onClick={onReset} className=\"btn btn-success btn-sm m-2\">\r\n          Reset\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\nimport Navbar from \"./Components/Navbar\";\nimport Counters from \"./Components/Counters\";\nimport \"./App.css\";\n\nclass App extends Component {\n  //First Phase of the Life Cycle Hook\n  constructor() {\n    // As a constructor, this function is only be called at the time of instance creation\n    super();\n    console.log(\"Welcome - App Constructor\", this.props);\n  }\n\n  //Second Phase of the Life Cycle Hook\n  componentDidMount() {\n    // best method to call ajax calls\n\n    console.log(\"App - mounted\");\n  }\n\n  state = {\n    counters: [\n      { id: 1, value: 4 },\n      { id: 2, value: 2 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n\n  handleIncrement = (counter) => {\n    console.log(counter);\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  handleDelete = (CounterId) => {\n    const update = this.state.counters.filter((c_ID) => c_ID.id !== CounterId);\n\n    this.setState({ counters: update }); // when we need to update if there is a change\n    //in names you need to encounter overwite the old property(Data) with new one.\n  };\n\n  handleReset = () => {\n    const reset = this.state.counters.map((resetV) => {\n      resetV.value = 0;\n      return resetV;\n    });\n    this.setState({ counters: reset });\n  };\n\n  render() {\n    //Third Phase of the Life Cycle Hook\n    console.log(\"App Rendered\");\n    return (\n      <React.Fragment>\n        <Navbar\n          className=\"resetOutline\"\n          totalCounters={\n            this.state.counters.filter((count) => count.value > 0).length\n          }\n        />\n        <main className=\"container resetOnline\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onDelete={this.handleDelete}\n            onIncrement={this.handleIncrement}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}